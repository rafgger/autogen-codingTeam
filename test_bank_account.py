"""
Comprehensive Test Suite for BankAccount Class
Generated by TestAgent ðŸ§ª

This test suite covers:
- Normal functionality tests
- Edge cases and boundary conditions
- Error handling and exceptions
- Integration scenarios
"""

import pytest
from decimal import Decimal
from sample_output import BankAccount, InsufficientFundsError, InvalidAmountError


class TestBankAccountInitialization:
    """Test account creation and initialization."""
    
    def test_create_account_with_name_and_balance(self):
        """Test creating account with valid name and initial balance."""
        account = BankAccount("John Doe", 100)
        assert account.account_holder == "John Doe"
        assert account.balance == Decimal("100")
    
    def test_create_account_with_zero_balance(self):
        """Test creating account with zero initial balance."""
        account = BankAccount("Jane Smith", 0)
        assert account.account_holder == "Jane Smith"
        assert account.balance == Decimal("0")
    
    def test_create_account_default_balance(self):
        """Test creating account without specifying initial balance."""
        account = BankAccount("Default User")
        assert account.balance == Decimal("0")
    
    def test_create_account_strips_whitespace(self):
        """Test that whitespace is stripped from account holder name."""
        account = BankAccount("  Spaced Name  ")
        assert account.account_holder == "Spaced Name"
    
    def test_create_account_empty_name_raises_error(self):
        """Test that empty account holder name raises ValueError."""
        with pytest.raises(ValueError, match="Account holder name cannot be empty"):
            BankAccount("")
            
        with pytest.raises(ValueError, match="Account holder name cannot be empty"):
            BankAccount("   ")
    
    def test_create_account_non_string_name_raises_error(self):
        """Test that non-string account holder name raises TypeError."""
        with pytest.raises(TypeError, match="Account holder name must be a string"):
            BankAccount(123)
            
        with pytest.raises(TypeError, match="Account holder name must be a string"):
            BankAccount(None)
    
    def test_create_account_negative_balance_raises_error(self):
        """Test that negative initial balance raises ValueError."""
        with pytest.raises(ValueError, match="Initial balance cannot be negative"):
            BankAccount("Negative User", -100)


class TestBankAccountDeposits:
    """Test deposit functionality."""
    
    @pytest.fixture
    def account(self):
        """Create a test account with initial balance."""
        return BankAccount("Test User", 100)
    
    def test_deposit_positive_amount(self, account):
        """Test depositing a positive amount."""
        new_balance = account.deposit(50)
        assert new_balance == Decimal("150")
        assert account.balance == Decimal("150")
    
    def test_deposit_decimal_amount(self, account):
        """Test depositing decimal amounts."""
        new_balance = account.deposit(25.75)
        assert new_balance == Decimal("125.75")
        assert account.balance == Decimal("125.75")
    
    def test_deposit_large_amount(self, account):
        """Test depositing large amounts."""
        large_amount = 1_000_000
        new_balance = account.deposit(large_amount)
        assert new_balance == Decimal("1000100")
    
    def test_deposit_zero_raises_error(self, account):
        """Test that depositing zero raises InvalidAmountError."""
        with pytest.raises(InvalidAmountError, match="Amount must be positive"):
            account.deposit(0)
    
    def test_deposit_negative_raises_error(self, account):
        """Test that depositing negative amount raises InvalidAmountError."""
        with pytest.raises(InvalidAmountError, match="Amount must be positive"):
            account.deposit(-50)
    
    def test_deposit_invalid_type_raises_error(self, account):
        """Test that depositing invalid types raises TypeError."""
        with pytest.raises(TypeError, match="Amount must be a valid number"):
            account.deposit("invalid")
            
        with pytest.raises(TypeError, match="Amount must be a valid number"):
            account.deposit(None)


class TestBankAccountWithdrawals:
    """Test withdrawal functionality."""
    
    @pytest.fixture
    def account(self):
        """Create a test account with sufficient balance."""
        return BankAccount("Test User", 1000)
    
    def test_withdraw_valid_amount(self, account):
        """Test withdrawing a valid amount."""
        new_balance = account.withdraw(200)
        assert new_balance == Decimal("800")
        assert account.balance == Decimal("800")
    
    def test_withdraw_decimal_amount(self, account):
        """Test withdrawing decimal amounts."""
        new_balance = account.withdraw(150.25)
        assert new_balance == Decimal("849.75")
    
    def test_withdraw_entire_balance(self, account):
        """Test withdrawing the entire balance."""
        new_balance = account.withdraw(1000)
        assert new_balance == Decimal("0")
        assert account.balance == Decimal("0")
    
    def test_withdraw_more_than_balance_raises_error(self, account):
        """Test that overdrafts raise InsufficientFundsError."""
        with pytest.raises(InsufficientFundsError, match="Insufficient funds"):
            account.withdraw(1500)
        
        # Balance should remain unchanged after failed withdrawal
        assert account.balance == Decimal("1000")
    
    def test_withdraw_zero_raises_error(self, account):
        """Test that withdrawing zero raises InvalidAmountError."""
        with pytest.raises(InvalidAmountError, match="Amount must be positive"):
            account.withdraw(0)
    
    def test_withdraw_negative_raises_error(self, account):
        """Test that withdrawing negative amount raises InvalidAmountError."""
        with pytest.raises(InvalidAmountError, match="Amount must be positive"):
            account.withdraw(-100)


class TestBankAccountTransfers:
    """Test money transfer functionality."""
    
    @pytest.fixture
    def accounts(self):
        """Create two test accounts for transfer testing."""
        sender = BankAccount("Sender", 1000)
        recipient = BankAccount("Recipient", 500)
        return sender, recipient
    
    def test_successful_transfer(self, accounts):
        """Test successful money transfer between accounts."""
        sender, recipient = accounts
        sender_balance, recipient_balance = sender.transfer(200, recipient)
        
        assert sender_balance == Decimal("800")
        assert recipient_balance == Decimal("700")
        assert sender.balance == Decimal("800")
        assert recipient.balance == Decimal("700")
    
    def test_transfer_entire_balance(self, accounts):
        """Test transferring entire balance."""
        sender, recipient = accounts
        sender_balance, recipient_balance = sender.transfer(1000, recipient)
        
        assert sender_balance == Decimal("0")
        assert recipient_balance == Decimal("1500")
    
    def test_transfer_insufficient_funds_raises_error(self, accounts):
        """Test that transfer with insufficient funds raises error."""
        sender, recipient = accounts
        
        with pytest.raises(InsufficientFundsError):
            sender.transfer(1500, recipient)
        
        # Balances should remain unchanged
        assert sender.balance == Decimal("1000")
        assert recipient.balance == Decimal("500")
    
    def test_transfer_to_invalid_account_raises_error(self, accounts):
        """Test that transfer to non-BankAccount raises TypeError."""
        sender, _ = accounts
        
        with pytest.raises(TypeError, match="Target account must be a BankAccount instance"):
            sender.transfer(100, "not_an_account")
    
    def test_transfer_zero_amount_raises_error(self, accounts):
        """Test that transferring zero amount raises InvalidAmountError."""
        sender, recipient = accounts
        
        with pytest.raises(InvalidAmountError, match="Amount must be positive"):
            sender.transfer(0, recipient)
    
    def test_transfer_to_same_account(self):
        """Test transferring money to the same account."""
        account = BankAccount("Self Transfer", 1000)
        sender_balance, recipient_balance = account.transfer(100, account)
        
        # Should result in same balance (withdraw then deposit)
        assert sender_balance == Decimal("1000")
        assert recipient_balance == Decimal("1000")
        assert account.balance == Decimal("1000")


class TestBankAccountProperties:
    """Test account properties and methods."""
    
    def test_account_holder_property_readonly(self):
        """Test that account holder property is read-only."""
        account = BankAccount("Property Test", 100)
        assert account.account_holder == "Property Test"
        
        # Should not be able to modify (no setter)
        with pytest.raises(AttributeError):
            account.account_holder = "Modified Name"
    
    def test_balance_property_readonly(self):
        """Test that balance property is read-only."""
        account = BankAccount("Balance Test", 100)
        assert account.balance == Decimal("100")
        
        # Should not be able to modify balance directly
        with pytest.raises(AttributeError):
            account.balance = Decimal("500")
    
    def test_transaction_history(self):
        """Test transaction history tracking."""
        account = BankAccount("History Test", 100)
        
        # Should have initial account creation entry
        history = account.get_transaction_history()
        assert len(history) == 1
        assert history[0]["type"] == "ACCOUNT_CREATED"
        
        # Perform transactions and verify history
        account.deposit(50)
        account.withdraw(25)
        
        history = account.get_transaction_history()
        assert len(history) == 3
        assert history[1]["type"] == "DEPOSIT"
        assert history[2]["type"] == "WITHDRAWAL"
    
    def test_string_representations(self):
        """Test string representations of account."""
        account = BankAccount("String Test", 150.50)
        
        str_repr = str(account)
        assert "String Test" in str_repr
        assert "150.5" in str_repr
        
        repr_str = repr(account)
        assert "BankAccount" in repr_str
        assert "String Test" in repr_str


class TestBankAccountIntegration:
    """Integration tests for complex scenarios."""
    
    def test_multiple_operations_scenario(self):
        """Test a complex scenario with multiple operations."""
        # Create accounts
        checking = BankAccount("Checking Account", 1000)
        savings = BankAccount("Savings Account", 2000)
        
        # Perform series of operations
        checking.deposit(500)        # 1500
        checking.withdraw(200)       # 1300
        checking.transfer(300, savings)  # checking: 1000, savings: 2300
        savings.withdraw(500)        # savings: 1800
        savings.transfer(200, checking)  # savings: 1600, checking: 1200
        
        assert checking.balance == Decimal("1200")
        assert savings.balance == Decimal("1600")
        
        # Verify transaction counts
        checking_history = checking.get_transaction_history()
        savings_history = savings.get_transaction_history()
        
        # checking: create, deposit, withdraw, transfer_out, transfer_in
        assert len(checking_history) == 5
        # savings: create, transfer_in, withdraw, transfer_out  
        assert len(savings_history) == 4
    
    def test_edge_case_precision(self):
        """Test decimal precision in calculations."""
        account = BankAccount("Precision Test", 100.01)
        
        account.deposit(0.01)    # 100.02
        account.withdraw(0.02)   # 100.00
        
        assert account.balance == Decimal("100.00")
    
    def test_large_numbers(self):
        """Test handling of large monetary amounts."""
        millionaire = BankAccount("Millionaire", 1_000_000.00)
        
        millionaire.deposit(500_000.50)
        assert millionaire.balance == Decimal("1500000.50")
        
        millionaire.withdraw(250_000.25)
        assert millionaire.balance == Decimal("1250000.25")


if __name__ == "__main__":
    print("ðŸ§ª Running BankAccount Test Suite")
    print("=" * 40)
    
    # Run tests with pytest
    pytest.main([__file__, "-v", "--tb=short"])
