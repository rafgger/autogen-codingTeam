"""
Sample Output: BankAccount Implementation
Generated by the AutoGen Multi-Agent System

This file shows what the four agents would collaboratively produce:
üß† CodeAssistant - Generated the main implementation
üßê CriticAgent - Suggested improvements for error handling and logging
üß™ TestAgent - Created comprehensive test suite  
üôã UserProxyAgent - Coordinated the workflow
"""

import logging
from typing import Optional, Union
from decimal import Decimal
from datetime import datetime

# Configure logging for transaction tracking
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class InsufficientFundsError(Exception):
    """Raised when attempting to withdraw more money than available."""
    pass

class InvalidAmountError(Exception):
    """Raised when an invalid amount is provided for transactions."""
    pass

class BankAccount:
    """
    A bank account class that manages account holder information and transactions.
    
    This class provides functionality for deposits, withdrawals, balance checking,
    and money transfers between accounts with comprehensive error handling and logging.
    """
    
    def __init__(self, account_holder: str, initial_balance: Union[float, Decimal] = 0) -> None:
        """
        Initialize a new bank account.
        
        Args:
            account_holder (str): The name of the account holder
            initial_balance (Union[float, Decimal]): Starting balance (default: 0)
            
        Raises:
            ValueError: If account_holder is empty or initial_balance is negative
            TypeError: If account_holder is not a string
        """
        if not isinstance(account_holder, str):
            raise TypeError("Account holder name must be a string")
        
        if not account_holder.strip():
            raise ValueError("Account holder name cannot be empty")
            
        if initial_balance < 0:
            raise ValueError("Initial balance cannot be negative")
            
        self._account_holder = account_holder.strip()
        self._balance = Decimal(str(initial_balance))
        self._transaction_history = []
        self._logger = logging.getLogger(f"BankAccount-{account_holder}")
        
        # Log account creation
        self._log_transaction("ACCOUNT_CREATED", initial_balance, self._balance)
        
    @property
    def account_holder(self) -> str:
        """Get the account holder's name."""
        return self._account_holder
    
    @property 
    def balance(self) -> Decimal:
        """Get the current account balance."""
        return self._balance
    
    def _validate_amount(self, amount: Union[float, Decimal]) -> Decimal:
        """
        Validate transaction amount.
        
        Args:
            amount: The amount to validate
            
        Returns:
            Decimal: The validated amount as Decimal
            
        Raises:
            InvalidAmountError: If amount is negative or zero
            TypeError: If amount cannot be converted to Decimal
        """
        try:
            decimal_amount = Decimal(str(amount))
        except (TypeError, ValueError) as e:
            raise TypeError(f"Amount must be a valid number: {e}")
            
        if decimal_amount <= 0:
            raise InvalidAmountError("Amount must be positive")
            
        return decimal_amount
    
    def _log_transaction(self, transaction_type: str, amount: Union[float, Decimal], 
                        new_balance: Decimal, target_account: Optional[str] = None) -> None:
        """Log transaction details."""
        transaction = {
            "timestamp": datetime.now().isoformat(),
            "type": transaction_type,
            "amount": str(amount),
            "balance_after": str(new_balance),
            "target_account": target_account
        }
        self._transaction_history.append(transaction)
        
        log_msg = f"{transaction_type}: ${amount} | New Balance: ${new_balance}"
        if target_account:
            log_msg += f" | Target: {target_account}"
        self._logger.info(log_msg)
    
    def deposit(self, amount: Union[float, Decimal]) -> Decimal:
        """
        Deposit money into the account.
        
        Args:
            amount: The amount to deposit
            
        Returns:
            Decimal: The new account balance
            
        Raises:
            InvalidAmountError: If amount is not positive
            TypeError: If amount is not a valid number
        """
        validated_amount = self._validate_amount(amount)
        self._balance += validated_amount
        self._log_transaction("DEPOSIT", validated_amount, self._balance)
        return self._balance
    
    def withdraw(self, amount: Union[float, Decimal]) -> Decimal:
        """
        Withdraw money from the account.
        
        Args:
            amount: The amount to withdraw
            
        Returns:
            Decimal: The new account balance
            
        Raises:
            InvalidAmountError: If amount is not positive
            InsufficientFundsError: If withdrawal amount exceeds balance
            TypeError: If amount is not a valid number
        """
        validated_amount = self._validate_amount(amount)
        
        if validated_amount > self._balance:
            raise InsufficientFundsError(
                f"Insufficient funds. Balance: ${self._balance}, "
                f"Requested: ${validated_amount}"
            )
            
        self._balance -= validated_amount
        self._log_transaction("WITHDRAWAL", validated_amount, self._balance)
        return self._balance
    
    def transfer(self, amount: Union[float, Decimal], target_account: 'BankAccount') -> tuple[Decimal, Decimal]:
        """
        Transfer money to another account.
        
        Args:
            amount: The amount to transfer
            target_account: The destination BankAccount instance
            
        Returns:
            tuple[Decimal, Decimal]: (sender_new_balance, recipient_new_balance)
            
        Raises:
            InvalidAmountError: If amount is not positive
            InsufficientFundsError: If transfer amount exceeds balance
            TypeError: If target_account is not a BankAccount instance
        """
        if not isinstance(target_account, BankAccount):
            raise TypeError("Target account must be a BankAccount instance")
            
        validated_amount = self._validate_amount(amount)
        
        # Withdraw from source account
        self.withdraw(validated_amount)
        
        try:
            # Deposit to target account
            target_account.deposit(validated_amount)
            
            # Log transfer on both accounts
            self._log_transaction("TRANSFER_OUT", validated_amount, self._balance, 
                                target_account.account_holder)
            target_account._log_transaction("TRANSFER_IN", validated_amount, 
                                          target_account._balance, self._account_holder)
            
            return self._balance, target_account._balance
            
        except Exception as e:
            # Rollback: re-deposit to source account if target deposit fails
            self.deposit(validated_amount)
            raise RuntimeError(f"Transfer failed, funds returned: {e}")
    
    def get_transaction_history(self) -> list[dict]:
        """Get a copy of the transaction history."""
        return self._transaction_history.copy()
    
    def __str__(self) -> str:
        """String representation of the account."""
        return f"BankAccount(holder='{self._account_holder}', balance=${self._balance})"
    
    def __repr__(self) -> str:
        """Developer representation of the account."""
        return f"BankAccount(account_holder='{self._account_holder}', balance={self._balance})"


# Example usage and demonstration
if __name__ == "__main__":
    print("üè¶ BankAccount Demo")
    print("=" * 40)
    
    # Create accounts
    alice_account = BankAccount("Alice Johnson", 1000)
    bob_account = BankAccount("Bob Smith", 500)
    
    print(f"Created: {alice_account}")
    print(f"Created: {bob_account}")
    print()
    
    # Perform transactions
    print("üí∞ Performing transactions...")
    alice_account.deposit(200)
    alice_account.withdraw(50)
    alice_account.transfer(100, bob_account)
    
    print(f"Final balances:")
    print(f"Alice: ${alice_account.balance}")
    print(f"Bob: ${bob_account.balance}")
    print()
    
    # Show transaction history
    print("üìä Alice's Transaction History:")
    for transaction in alice_account.get_transaction_history():
        print(f"  {transaction['timestamp'][:19]}: {transaction['type']} ${transaction['amount']}")
